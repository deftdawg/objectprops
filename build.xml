<?xml version="1.0"?>
<project name="objectprops" default="main" basedir=".">
	<description>build the objectprops library</description>
	
	<!--#################### Init constant properties ########################-->
	<property file="build.local.properties" />

	<property name="project.title" value="ObjectProps" />
	<property name="project.vendor" value="Michael Karneim" />
	<property name="project.url" value="http://objectprops.googlecode.com" />
	<property name="project.copyright" value="2009 by Michael Karneim" />
	
	<property name="compile.debug" value="true" />
	<property name="compile.deprecation" value="false" />
	<property name="compile.optimize" value="true" />
	<property name="compile.source" value="1.2" />
	<property name="compile.target" value="1.2" />

	<!-- Folders and files -->
	<property name="src.dir" location="${basedir}/src" />
	<property name="src.main.java.dir" location="${src.dir}/main/java" />
	<property name="src.examples.java.dir" location="${src.dir}/examples/java" />
	<property name="src.test.dir" location="${src.dir}/test" />
	<property name="src.meta-inf.dir" location="${src.dir}/META-INF" />

	<property name="build.dir" location="${basedir}/build" />
	<property name="build.classes.dir" location="${build.dir}/classes" />
	
	<property name="build.bin.dir" location="${build.dir}/bin" />
	<property name="build.src.dir" location="${build.dir}/src" />
	<property name="build.project.dir" location="${build.dir}/project" />
	<property name="build.javadoc.dir" location="${build.dir}/javadoc" />
	<property name="build.manifest.dir" location="${build.dir}/manifest" />
	<property name="build.manifest.file" location="${build.manifest.dir}/manifest.mf" />
	
	<property name="dist.dir" location="${basedir}/dist" />
	<property name="dist.javadoc.dir" value="${dist.dir}/javadoc"/>
	
	<property name="ext.dir" location="${basedir}/ext" />
	<property name="ant-googlecode.lib.dir" location="${ext.dir}/ant-googlecode" />
	
	
	<!-- Filesets and paths -->
	<fileset id="build.classes.fileset" dir="${build.classes.dir}" description="Compiled classes without tests.">
		<exclude name="**/*Test.class" />
	</fileset>
	
	<path id="class.path">
		<pathelement path="${currentenv.classpath}" />
	</path>
	
	<path id="run.javadoc.classpath" description="Classpath for running javadoc">
		<pathelement path="${currentenv.classpath}" />
	</path>

	<!--#################### Init dynamic properties ########################-->
	<target name="init">
		<tstamp>
			<format property="build.time" pattern="MMM/dd/yyyy hh:mm aa z"/>
		</tstamp>		
	</target>
	
	<target name="init-version" depends="init">
		<property file="build.version" />
	    <fail unless="version.major" message="Invalid contents for file 'build.version', missing 'version.major'."/>
	    <fail unless="version.minor" message="Invalid contents for file 'build.version', missing 'version.minor'."/>
	    <fail unless="version.build" message="Invalid contents for file 'build.version', missing 'version.build'."/>
		<property name="project.version" value="${version.major}.${version.minor}.${version.build}" />
		<echo message=" ${ant.project.name} ${project.version}"/>
	</target>
	
	<target name="init-dist" depends="init, init-version">
		<property name="classes.jarfile" value="${dist.dir}/${ant.project.name}.jar"/>	
		<property name="src.jarfile" value="${dist.dir}/${ant.project.name}-src.jar"/>
		<property name="project.zipfile" value="${dist.dir}/${ant.project.name}-${project.version}-project.zip"/>
		<property name="bin.zipfile" value="${dist.dir}/${ant.project.name}-${project.version}.zip"/>
		<property name="javadoc.jarfile" value="${dist.dir}/${ant.project.name}-docs.jar"/>
	</target>
	
	
	<!--#################### Build targets ########################-->
	<target name="clean" depends="init" description="Clean up all generated files.">
		<delete dir="${dist.dir}" />
		<delete dir="${build.dir}" />
	</target>
	
	<target name="prepare-classes-dir" depends="init">
		<mkdir dir="${build.dir}" />
		<delete dir="${build.classes.dir}" />
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${build.classes.dir}/META-INF" />
		<copy todir="${build.classes.dir}/META-INF" >
			<fileset dir="${basedir}" 
				     includes="readme.txt license.txt lgpl.txt" />
		</copy>
	</target>

	<target name="compile-main" depends="init, prepare-classes-dir">
		<javac classpathref="class.path" destdir="${build.classes.dir}" 
			   source="${compile.source}" target="${compile.target}" 
			   debug="${compile.debug}" deprecation="${compile.deprecation}" 
			   optimize="${compile.optimize}">
			<src path="${src.main.java.dir}" />
		</javac>
	</target>
	
	<target name="compile" depends="init, compile-main">
	</target>
	
	<target name="prepare-javadoc" depends="init, init-version" >
		<mkdir dir="${build.javadoc.dir}" />
		<copy todir="${build.javadoc.dir}">
			<fileset dir="${basedir}" includes="build.version readme.txt license.txt lgpl.txt 3rdparty-licenses.txt" />
		</copy>
	</target>

	<target name="run-javadoc" depends="init, prepare-javadoc" description="Run javadoc">
		<javadoc maxmemory="64m" destdir="${build.javadoc.dir}" classpathref="run.javadoc.classpath"
			     author="true" version="true" use="true" windowtitle="${project.title} ${project.version}">
			<fileset dir="${src.main.java.dir}" includes="**/*.java" />
			<doctitle><![CDATA[<h1>${project.title} ${project.version}</h1>]]></doctitle>
			<bottom><![CDATA[${project.title} ${project.version}, <i>&copy; ${project.copyright}.
				<br/><a href="license.txt">Licensed</a> under <a href="lgpl.txt">GNU LGPL</a>.
			    <br/>Released at <a href="${project.url}" target="_parent">${project.url}</a></i>.]]></bottom>
			<tag name="todo" scope="all" description="To do:" />
		</javadoc>
	</target>
	
	<target name="prepare-dist" depends="init, init-dist">
		<mkdir dir="${dist.dir}" />
	</target>
		
	<target name="create-classes-jar" depends="init, prepare-dist, compile" description="Create jar with all classes">
		<jar destfile="${classes.jarfile}">
			<fileset refid="build.classes.fileset" />			
			<manifest>
				<attribute name="Build-Date" value="${build.time}" />
				<attribute name="Build-Version" value="${project.version}" />
				<attribute name="Implementation-Title" value="${project.title}" />
				<attribute name="Implementation-Version" value="${project.version}" />
				<attribute name="Implementation-Vendor" value="${project.vendor}" />
			</manifest>
		</jar>
	</target>
	
	<target name="create-javadoc-jar" depends="init, prepare-dist, run-javadoc" description="Creates a JAR file with javadoc HTML files">
		<jar destfile="${javadoc.jarfile}">
			<fileset dir="${build.javadoc.dir}" />
		</jar>
	</target>
	
	<target name="create-src-jar" depends="init, prepare-dist" description="Creates a JAR file with all sources.">
		<delete dir="${build.src.dir}" />
		<mkdir dir="${build.src.dir}" />
		<mkdir dir="${build.src.dir}/META-INF" />
		<copy todir="${build.src.dir}/META-INF" >
			<fileset dir="${basedir}"
				     includes="build.version readme.txt license.txt 3rdparty-licenses.txt lgpl.txt" />
		</copy>
		<copy todir="${build.src.dir}" >
			<fileset dir="${src.main.java.dir}" />
		</copy>

		<mkdir dir="${dist.dir}" />
		<jar destfile="${src.jarfile}">
			<fileset dir="${build.src.dir}" />
		</jar>
	</target>

	<target name="create-bin-zip" depends="init, prepare-dist, create-classes-jar, create-javadoc-jar, create-src-jar" description="Create a zip file with the classes JAR">
		<property name="build.bin.content.dir" location="${build.bin.dir}/${ant.project.name}"/>
		<delete dir="${build.bin.dir}" />
		<mkdir dir="${build.bin.content.dir}" />
		<copy file="${classes.jarfile}" todir="${build.bin.content.dir}" />
		<copy file="${src.jarfile}" todir="${build.bin.content.dir}" />
		<copy file="${javadoc.jarfile}" todir="${build.bin.content.dir}" />
		<copy todir="${build.bin.content.dir}">
			<fileset dir="${basedir}" includes="build.version readme.txt license.txt 3rdparty-licenses.txt lgpl.txt" />
		</copy>
		<zip destfile="${bin.zipfile}">
			<fileset dir="${build.bin.dir}" />
		</zip>
	</target>
	
	<target name="create-project-zip" depends="init, prepare-dist" description="Creates a zip file with all project sources including the build script">
		<property name="build.project.content.dir" location="${build.project.dir}/${ant.project.name}"/>
		<delete dir="${build.project.content.dir}"/>
		<mkdir dir="${build.project.content.dir}"/>
		<copy todir="${build.project.content.dir}">
			<fileset dir="${basedir}">
				<exclude name="bin/**" />
				<exclude name="dist/**" />
				<exclude name="tmp/**" />
				<exclude name="build/**" />
				<exclude name="build.local.properties" />		
				<exclude name="build.credentials" />
			</fileset>
		</copy>
		<mkdir dir="${build.project.content.dir}/lib"/>		
		<zip destfile="${project.zipfile}">
			<fileset dir="${build.project.dir}"/>
		</zip>
	</target>
	
	<target name="create-zips" depends="init, create-bin-zip, create-project-zip">
	</target>
	
	<target name="dist" depends="init, clean, create-zips">
	</target>
	
	<target name="create-javadoc-dist" depends="init, run-javadoc">		
		<delete dir="${dist.javadoc.dir}"/>
		<mkdir dir="${dist.javadoc.dir}"/>
		<copy todir="${dist.javadoc.dir}">
			<fileset dir="${build.javadoc.dir}">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<!--#################### Upload target ########################-->
	<target name="upload" depends="init, init-dist" description="Upload files to to google code site">
		<path id="ant-googlecode.classpath">
			<fileset dir="${ant-googlecode.lib.dir}">
				<include name="*.jar" />
			</fileset>
		</path>
	    <taskdef name="gcupload" classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask"
	    	                     classpathref="ant-googlecode.classpath" />

	    <property file="build.credentials" />
	    <fail unless="gc.username" message="Missing property 'gc.username' from file 'build.credentials'."/>
	    <fail unless="gc.password" message="Missing property 'gc.password' from file 'build.credentials'."/>

	    <property name="release.label" value="Release-Final"/>

		<basename file="${project.zipfile}" property="project.zipfile.name"/>
	    <gcupload filename="${project.zipfile}"
	              username="${gc.username}"
	              password="${gc.password}"
	           projectname="${ant.project.name}"
	      targetfilename="${project.zipfile.name}"
	             summary="${project.title} ${project.version} source distribution: source code, build files, unit tests, sample code"
	              labels="Type-Project, ${release.label}" />

		<basename file="${bin.zipfile}" property="bin.zipfile.name"/>
		<basename file="${src.jarfile}" property="src.jarfile.name"/>
		<basename file="${javadoc.jarfile}" property="javadoc.jarfile.name"/>
		<basename file="${classes.jarfile}" property="classes.jarfile.name"/>

		<gcupload filename="${bin.zipfile}"
	              username="${gc.username}"
	              password="${gc.password}"
	           projectname="${ant.project.name}"
	      targetfilename="${bin.zipfile.name}"
	             summary="${project.title} ${project.version} binary distribution: ${classes.jarfile.name}, ${javadoc.jarfile.name} and ${src.jarfile.name}"
	              labels="Type-Binary, Featured, ${release.label}" />
	</target>
	
	<!--#################### Main targets ########################-->

	<target name="main" depends="init, dist">
	</target>
	
</project>
